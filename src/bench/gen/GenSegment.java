/* GenSegment.java - Copyright (c) 2004 through 2008, Progress Software Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" 
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language 
 * governing permissions and limitations under the License.
 */
package bench.gen;

import java.io.OutputStream;

/**
 * Interface for classes that generate XML text based on input template patterns.
 * Input templates are valid XML files with embedded instructions in the format:
 * <pre>
 *   &lt;?gen.TOKEN PARAM1=val PARAM2=val2... ?&gt;
 * 
 * Specific formats supported are:
 *   &lt;?gen.value order=XXX modulus=NN ?&gt;
 *   &lt;?gen.date order=XXX type=TTT start=MM/DD/YYYY ?&gt;
 *   &lt;?gen.words count=N source=SSS path=PPP ?&gt;
 *   &lt;?gen.begin count=N context=XXX ?&gt;
 *   &lt;?gen.end ?&gt;
 *  where the various parameters (count, etc) are defined within the specific implementation.
 * </pre>
 * <p>Note that the leading tag string "gen.value " must match as a (case-insensitive)
 * literal, including colon, period and space characters.
 * </p>
 * @see bench.gen.GenBlock
 * @see bench.gen.GenDate
 * @see bench.gen.GenText
 * @see bench.gen.GenValue
 * @see bench.gen.GenVariable
 * @see bench.gen.GenWords
 * @author Progress Software Inc., all rights reserved.
 * @version TestHarness8.0
 */
public interface GenSegment
{
	/**
	 * Initialize the segment with input parameters and/or literal text.
	 *   If the type of segment == LITERAL, the params string consists of the literal
	 * XML text to be inserted.  If the segment is VALUE, WORDS or BLOCK the attributes
	 * of the embedded processing instruction are passed in.  For BLOCK segments, you
	 * must then call the parse() method so the block can scan for child segments.
	 * 
	 * @param params A list of name=value pairs, with whitespace delimiters, defining the attributes for the segment.
	 * @return true if initialization succeeded and segment should be included, false if this segment should be ignored.
	 */
	public boolean initialize ( String params );
	
	/**
	 * Create the output XML text for this segment.
	 * If this is a block segment, it will recursively generate text from all
	 * child segments.  If it is a literal segment it simply returns the constant
	 * string value.  For value segments, the generated key value may or may not
	 * depend on the input context value.
	 * 
	 * @param context A unique, sequentially ascending number generated by the caller.
	 * @return A String containing the generated output for this segment and any child segments.
	 */
	public String generate ( long context );
	
	/**
	 * Generate the output XML text for this segment into an output stream.
	 * 
	 * @param context A unique, sequentially ascending number generated by the caller.
	 * @param out The output stream into which generated text will be written.
	 */
	public long generate ( long context, OutputStream out );
	
	/**
	 * Determine which kind of segment you have.
	 * Current valid segment types include: LITERAL, VALUE, WORDS, BLOCK, DATE and VARIABLE 
	 * @param segmentType An integer representing the enum value for segment type from GenSegment.
	 * @return true if the segment type is the correct Segment type, false otherwise.
	 */
	public boolean isA ( int segmentType );
	
	// ============ static fields and methods =============
	
	/** Segment is the top level GenXml object. */
	public static final int GENXML = 0;
	/** Segment is literal text, which will be inserted into the XML output. */
	public static final int LITERAL = 1;
	/** Segment is a generated integer formatted as a string, used as a key for value query. */
	public static final int VALUE = 2;
	/** Segment is a group of generated words for text query. */
	public static final int WORDS = 3;
	/** Segment is a nested template block for multi-child elements. */
	public static final int BLOCK = 4;
	/** Segment is a generated date value for date query. */
	public static final int DATE = 5;
	/** Segment is a saved variable from a VALUE segment or other. */
	public static final int VARIABLE = 6;
	
	public static final String BEGIN_TAG = "<?gen"; // Pattern beginning param string
	public static final String END_TAG = "?>";   // Pattern ending param string
	public static final String BEGIN_TOKEN = "."; // Pattern beginning token string
	public static final String END_TOKEN = " ";   // Pattern ending token string
	public static final String VALUE_TOKEN = "value"; // Keyword for Value segment
	public static final String WORDS_TOKEN = "words"; // Keyword for Words segment
	public static final String DATE_TOKEN = "date"; // Keyword for Date segment
	public static final String VAR_TOKEN = "variable"; // Keyword for Variable segment
	public static final String GENFILE_TOKEN = "file"; // Keyword for inserted GenXml segment
	public static final String BLOCK_START_TOKEN = "begin"; // Delimiter at start of block segment
	public static final String BLOCK_END_TOKEN = "end"; // Delimiter at end of block segment
	public static final String COMMENT_TOKEN = "comment"; // Contents of this processing instruction will be stripped out and ignored
	
	public static String HELP_TEXT = new String(BEGIN_TAG+BEGIN_TOKEN+"TOKEN"+END_TOKEN+"[params]..."
			+ "\n Where TOKEN can be "+BLOCK_START_TOKEN+", "+BLOCK_END_TOKEN+", "+COMMENT_TOKEN+", "+DATE_TOKEN + ", "+VALUE_TOKEN+", "+VAR_TOKEN+" or "+WORDS_TOKEN
			+ "and params aredefined in com.parelastic.bench.gen.GenSegmentBase or one of its subclasses."); 
	
} // end of interface GenSegment
